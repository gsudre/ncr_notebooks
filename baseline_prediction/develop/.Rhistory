struct_data
colnames(struct_rois)
dim(struct_rois)
dim(dti_tracts)
colSums(is.na(struct_rois))
rowSums(is.na(struct_rois))
dim(struct_rois)
colnames(struct_rois)
rowSums(is.na(struct_rois))
rm_me = rowSums(is.na(struct_rois)) >= (ncol(struct_rois)-2)
sum(rm_me)
rm_me2 = rowSums(is.na(dti_tracts)) >= (ncol(dti_tracts)-2)
sum(rm_me2)
sum(rm_me2 & rm_me)
sum(rm_me2 | rm_me)
s = struct_rois[rm_me2 | rm_me, ]
d = dti_tracts[rm_me2 | rm_me, ]
dim(s)
sim(d)
dim(d)
library(PMA)
install.packages('PMA')
colSums(is.na(d))
s = struct_rois[!(rm_me2 | rm_me), ]
d = dti_tracts[!(rm_me2 | rm_me), ]
colSums(is.na(d))
colSums(is.na(s))
d = dti_tracts[!(rm_me2 | rm_me), 1:ncol(dti_tracts)-2]
d = dti_tracts[!(rm_me2 | rm_me), 1:(ncol(dti_tracts)-2)]
s = struct_rois[!(rm_me2 | rm_me), 1:(ncol(struct_rois)-2)]
colSums(is.na(d))
library(PMA)
install.packages('impute')
library(PMA)
library(impute)
require(PMA)
require(impute)
install.packages('nscancor')
library(nscancor)
res = mcancor(list(s,d))
dim(s)
dim(s)
dim(d)
install.packages('RGCCA')
library(RGCCA)
cca.with.rgcca = rgcca(A= list(s, d),
C = matrix(c(0, 1, 1, 0), 2, 2),
tau = c(0, 0))
colSums(is.na(d))
rm_me = colSums(is.na(d)) > 0
d = d[, !rm_me]
cca.with.rgcca = rgcca(A= list(s, d),
C = matrix(c(0, 1, 1, 0), 2, 2),
tau = c(0, 0))
names(cca.with.rgcca)
dim(s)
dim(d)
?rgcca
cca.with.rgcca = rgcca(A= list(s, d),
C = matrix(c(0, 1, 1, 0), 2, 2),
tau = 'optimal')
cca.with.rgcca$ncomp
rep(0,3)
cca.with.rgcca$tau
cca.with.rgcca$a
dim(cca.with.rgcca$a)
lapply(cca.with.rgcca$Y, head)
cca.with.rgcca$AVE
cca.with.rgcca = rgcca(A= list(s, d),
C = matrix(c(0, 1, 1, 0), 2, 2),
tau = 'optimal', ncomp=c(10, 10))
dim(cca.with.rgcca$a)
dim(cca.with.rgcca$Y)
head(cca.with.rgcca$Y)
?sgcca
?sgccak
?sgcca
cca.with.rgcca1 = rgcca(A= list(s, d),
C = matrix(c(0, 1, 1, 0), 2, 2),
tau = 'optimal', ncomp=c(10, 10))
cca.with.rgcca2 = rgcca(A= list(s, d),
C = matrix(c(0, 1, 1, 0), 2, 2),
tau = 'optimal', ncomp=c(3, 3))
cca.with.rgcca1$Y
cca.with.rgcca1$Y[[1]]
head(cca.with.rgcca1$Y[[1]])
length(cca.with.rgcca1$Y)
head(cca.with.rgcca2$Y[[1]])
library(caret)
?rfe
?rfRFE
?rfFuncs
?caretFuncs
source('~/ncr_notebooks/baseline_prediction/src/aux_functions.R')
source('~/ncr_notebooks/baseline_prediction/src/load_raw_voting_data.R')
library(caret)
adhd_idx = gf_base$DX_BASELINE!='NV'
out_group = c()
for (s in gf_base[adhd_idx,]$MRN) {
idx = which(gf$MRN==s)
subj_sx = gf[idx, c('SX_inatt', 'SX_HI')]
last_age = sort(gf[idx,]$age, index.return=T, decreasing=T)
last_sx = subj_sx[last_age$ix[1], ]
if (last_age$x[1] > 18) {
# adult
if (last_sx$SX_inatt > 4 || last_sx$SX_HI > 4) {
out_group = c(out_group, 'persistent')
} else {
out_group = c(out_group, 'remission')
}
} else {
# child
if (last_sx$SX_inatt > 5 || last_sx$SX_HI > 5) {
out_group = c(out_group, 'persistent')
} else {
out_group = c(out_group, 'remission')
}
}
}
out_group = factor(out_group, levels=c('remission', 'persistent'))
dtype = 'prs'
y = out_group
methods = c('rf', 'svmRadial', 'kernelpls')
library(caret)
library(doMC)
ncpus <- 2 #detectBatchCPUs()
registerDoMC(ncpus)
ntimes = 50
myseed = 1234
tuneLength = 10
cpuDiff = 0
eval(parse(text=sprintf('X = %s[adhd_idx, ]', dtype)))
# recoding SEX
dummies = dummyVars(~SEX, data=X)
X = cbind(X, predict(dummies, newdata=X))
X$SEX = NULL
# removing anyone that is all NaNs for this dataset
rm_me = rowSums(is.na(X)) == ncol(X)
X = X[!rm_me,]
y = y[!rm_me]
# do PCA but do not include age and sex variables in it
not_include = c(which(grepl("^SEX", colnames(X))), which(grepl("age", colnames(X))))
pp = preProcess(X[, -not_include], method=c('medianImpute', 'center', 'scale', 'pca'), thresh=.9)
nfeat = ncol(X)
Xfilt = predict(pp, X[, -not_include])
X = cbind(Xfilt, X[, not_include])
print(sprintf('Reduced from %d to %d features', nfeat, ncol(X)))
index=createResample(y, ntimes)
train_model = function(m) {
if (m %in% c('xgbLinear', 'xgbTree', 'avNNet')) {
ap = F
} else { ap = T }
set.seed(myseed)
my_control <- trainControl(
method="repeatedcv",
repeats=5,
savePredictions="final",
index=index,
allowParallel = ap,
classProbs = T,
summaryFunction = twoClassSummary,
sampling = "smote"
)
print(sprintf('===== TRYING %s =====', m))
mymod = train(X, y, trControl=my_control, method=m, tuneLength=tuneLength,
metric = 'ROC')
return(mymod)
}
trained_models = lapply(methods, train_model)
names(trained_models) = methods
resamps <- resamples(trained_models)
print(summary(resamps))
length(index)
dtype = 'prs'
y = out_group
methods = c('rf', 'svmRadial', 'kernelpls')
library(caret)
library(doMC)
ncpus <- 2 #detectBatchCPUs()
registerDoMC(ncpus)
ntimes = 50
myseed = 1234
tuneLength = 10
cpuDiff = 0
eval(parse(text=sprintf('X = %s[adhd_idx, ]', dtype)))
# recoding SEX
dummies = dummyVars(~SEX, data=X)
X = cbind(X, predict(dummies, newdata=X))
X$SEX = NULL
# removing anyone that is all NaNs for this dataset
rm_me = rowSums(is.na(X)) == ncol(X)
X = X[!rm_me,]
y = y[!rm_me]
# do PCA but do not include age and sex variables in it
not_include = c(which(grepl("^SEX", colnames(X))), which(grepl("age", colnames(X))))
pp = preProcess(X[, -not_include], method=c('medianImpute', 'center', 'scale', 'pca'), thresh=.9)
nfeat = ncol(X)
Xfilt = predict(pp, X[, -not_include])
X = cbind(Xfilt, X[, not_include])
print(sprintf('Reduced from %d to %d features', nfeat, ncol(X)))
index=createResample(y, ntimes)
train_model = function(m) {
if (m %in% c('xgbLinear', 'xgbTree', 'avNNet')) {
ap = F
} else { ap = T }
set.seed(myseed)
my_control <- trainControl(
method="boot632",
savePredictions="final",
index=index,
allowParallel = ap,
classProbs = T,
summaryFunction = twoClassSummary,
sampling = "smote"
)
print(sprintf('===== TRYING %s =====', m))
mymod = train(X, y, trControl=my_control, method=m, tuneLength=tuneLength,
metric = 'ROC')
return(mymod)
}
trained_models = lapply(methods, train_model)
names(trained_models) = methods
resamps <- resamples(trained_models)
print(summary(resamps))
y = out_group
methods = c('rf', 'svmRadial', 'kernelpls')
library(caret)
library(doMC)
ncpus <- 2 #detectBatchCPUs()
registerDoMC(ncpus)
ntimes = 50
myseed = 1234
tuneLength = 10
cpuDiff = 0
for (dtype in c('prs', 'dti_tracts', 'struct_rois', 'geospatial', 'neuropsych')) {
print(sprintf('===== TRYING %s =====', dtype))
eval(parse(text=sprintf('X = %s[adhd_idx, ]', dtype)))
# recoding SEX
dummies = dummyVars(~SEX, data=X)
X = cbind(X, predict(dummies, newdata=X))
X$SEX = NULL
# removing anyone that is all NaNs for this dataset
rm_me = rowSums(is.na(X)) == ncol(X)
X = X[!rm_me,]
y = y[!rm_me]
# do PCA but do not include age and sex variables in it
not_include = c(which(grepl("^SEX", colnames(X))), which(grepl("age", colnames(X))))
pp = preProcess(X[, -not_include], method=c('medianImpute', 'center', 'scale', 'pca'), thresh=.9)
nfeat = ncol(X)
Xfilt = predict(pp, X[, -not_include])
X = cbind(Xfilt, X[, not_include])
print(sprintf('Reduced from %d to %d features', nfeat, ncol(X)))
index=createResample(y, ntimes)
train_model = function(m) {
if (m %in% c('xgbLinear', 'xgbTree', 'avNNet')) {
ap = F
} else { ap = T }
set.seed(myseed)
my_control <- trainControl(
method="boot632",
savePredictions="final",
index=index,
allowParallel = ap,
classProbs = T,
summaryFunction = twoClassSummary,
sampling = "smote"
)
mymod = train(X, y, trControl=my_control, method=m, tuneLength=tuneLength,
metric = 'ROC')
return(mymod)
}
trained_models = lapply(methods, train_model)
names(trained_models) = methods
resamps <- resamples(trained_models)
print(summary(resamps))
}
table(y)
summary(X)
methods = c('rf', 'svmRadial', 'kernelpls')
library(caret)
library(doMC)
ncpus <- 2 #detectBatchCPUs()
registerDoMC(ncpus)
ntimes = 50
myseed = 1234
tuneLength = 10
cpuDiff = 0
for (dtype in c('prs', 'dti_tracts', 'struct_rois', 'geospatial', 'neuropsych')) {
print(sprintf('===== TRYING %s =====', dtype))
eval(parse(text=sprintf('X = %s[adhd_idx, ]', dtype)))
y = out_group
# recoding SEX
dummies = dummyVars(~SEX, data=X)
X = cbind(X, predict(dummies, newdata=X))
X$SEX = NULL
# removing anyone that is all NaNs for this dataset
rm_me = rowSums(is.na(X)) == ncol(X)
X = X[!rm_me,]
y = y[!rm_me]
# do PCA but do not include age and sex variables in it
not_include = c(which(grepl("^SEX", colnames(X))), which(grepl("age", colnames(X))))
pp = preProcess(X[, -not_include], method=c('medianImpute', 'center', 'scale', 'pca'), thresh=.9)
nfeat = ncol(X)
Xfilt = predict(pp, X[, -not_include])
X = cbind(Xfilt, X[, not_include])
print(sprintf('Reduced from %d to %d features', nfeat, ncol(X)))
index=createResample(y, ntimes)
train_model = function(m) {
if (m %in% c('xgbLinear', 'xgbTree', 'avNNet')) {
ap = F
} else { ap = T }
set.seed(myseed)
my_control <- trainControl(
method="boot632",
savePredictions="final",
index=index,
allowParallel = ap,
classProbs = T,
summaryFunction = twoClassSummary,
sampling = "smote"
)
mymod = train(X, y, trControl=my_control, method=m, tuneLength=tuneLength,
metric = 'ROC')
return(mymod)
}
trained_models = lapply(methods, train_model)
names(trained_models) = methods
resamps <- resamples(trained_models)
print(summary(resamps))
}
table(y)
table(outcome)
table(out_group)
table(out_group)
```{r}
out_group = c()
for (s in gf_base[adhd_idx,]$MRN) {
idx = which(gf$MRN==s)
subj_sx = gf[idx, c('SX_inatt', 'SX_HI')]
last_age = sort(gf[idx,]$age, index.return=T, decreasing=T)
last_sx = subj_sx[last_age$ix[1], ]
if (last_age$x[1] > 18) {
# adult
if (last_sx$SX_inatt > 4 || last_sx$SX_HI > 4) {
out_group = c(out_group, 'persistent')
} else {
out_group = c(out_group, 'remission')
}
} else {
# child
if (last_sx$SX_inatt > 5 || last_sx$SX_HI > 5) {
out_group = c(out_group, 'persistent')
} else {
out_group = c(out_group, 'remission')
}
}
}
out_group = factor(out_group, levels=c('remission', 'persistent'))
```
Now we do some simple prediction using the entire data:
```{r}
methods = c('rf', 'svmRadial', 'kernelpls')
library(caret)
library(doMC)
ncpus <- 2 #detectBatchCPUs()
registerDoMC(ncpus)
ntimes = 50
myseed = 1234
tuneLength = 10
cpuDiff = 0
for (dtype in c('prs', 'dti_tracts', 'struct_rois', 'geospatial', 'neuropsych')) {
print(sprintf('===== TRYING %s =====', dtype))
eval(parse(text=sprintf('X = %s[adhd_idx, ]', dtype)))
y = out_group
# recoding SEX
dummies = dummyVars(~SEX, data=X)
X = cbind(X, predict(dummies, newdata=X))
X$SEX = NULL
# removing anyone that is all NaNs for this dataset
rm_me = rowSums(is.na(X)) == ncol(X)
X = X[!rm_me,]
y = y[!rm_me]
# do PCA but do not include age and sex variables in it
not_include = c(which(grepl("^SEX", colnames(X))), which(grepl("age", colnames(X))))
pp = preProcess(X[, -not_include], method=c('medianImpute', 'center', 'scale', 'pca'), thresh=.9)
nfeat = ncol(X)
Xfilt = predict(pp, X[, -not_include])
X = cbind(Xfilt, X[, not_include])
print(sprintf('Reduced from %d to %d features', nfeat, ncol(X)))
index=createResample(y, ntimes)
train_model = function(m) {
if (m %in% c('xgbLinear', 'xgbTree', 'avNNet')) {
ap = F
} else { ap = T }
set.seed(myseed)
my_control <- trainControl(
method="boot632",
savePredictions="final",
index=index,
allowParallel = ap,
classProbs = T,
summaryFunction = twoClassSummary,
sampling = "smote"
)
mymod = train(X, y, trControl=my_control, method=m, tuneLength=tuneLength,
metric = 'ROC')
return(mymod)
}
trained_models = lapply(methods, train_model)
names(trained_models) = methods
resamps <- resamples(trained_models)
print(summary(resamps))
}
out_group = c()
for (s in gf_base[adhd_idx,]$MRN) {
idx = which(gf$MRN==s)
subj_sx = gf[idx, c('SX_inatt', 'SX_HI')]
last_age = sort(gf[idx,]$age, index.return=T, decreasing=T)
last_sx = subj_sx[last_age$ix[1], ]
if (last_age$x[1] > 18) {
# adult
if (last_sx$SX_HI > 4) {
out_group = c(out_group, 'persistent')
} else {
out_group = c(out_group, 'remission')
}
} else {
# child
if (last_sx$SX_HI > 5) {
out_group = c(out_group, 'persistent')
} else {
out_group = c(out_group, 'remission')
}
}
}
out_group = factor(out_group, levels=c('remission', 'persistent'))
table(out_group)
out_group = c()
for (s in gf_base[adhd_idx,]$MRN) {
idx = which(gf$MRN==s)
subj_sx = gf[idx, c('SX_inatt', 'SX_HI')]
last_age = sort(gf[idx,]$age, index.return=T, decreasing=T)
last_sx = subj_sx[last_age$ix[1], ]
if (last_age$x[1] > 18) {
# adult
if (last_sx$SX_HI > 4) {
out_group = c(out_group, 'persistent')
} else {
out_group = c(out_group, 'remission')
}
} else {
# child
if (last_sx$SX_HI > 5) {
out_group = c(out_group, 'persistent')
} else {
out_group = c(out_group, 'remission')
}
}
}
out_group = factor(out_group, levels=c('remission', 'persistent'))
methods = c('rf', 'svmRadial', 'kernelpls')
library(caret)
library(doMC)
ncpus <- 2 #detectBatchCPUs()
registerDoMC(ncpus)
ntimes = 50
myseed = 1234
tuneLength = 10
cpuDiff = 0
for (dtype in c('prs', 'dti_tracts', 'struct_rois', 'geospatial', 'neuropsych')) {
print(sprintf('===== TRYING %s =====', dtype))
eval(parse(text=sprintf('X = %s[adhd_idx, ]', dtype)))
y = out_group
# recoding SEX
dummies = dummyVars(~SEX, data=X)
X = cbind(X, predict(dummies, newdata=X))
X$SEX = NULL
# removing anyone that is all NaNs for this dataset
rm_me = rowSums(is.na(X)) == ncol(X)
X = X[!rm_me,]
y = y[!rm_me]
# do PCA but do not include age and sex variables in it
not_include = c(which(grepl("^SEX", colnames(X))), which(grepl("age", colnames(X))))
pp = preProcess(X[, -not_include], method=c('medianImpute', 'center', 'scale', 'pca'), thresh=.9)
nfeat = ncol(X)
Xfilt = predict(pp, X[, -not_include])
X = cbind(Xfilt, X[, not_include])
print(sprintf('Reduced from %d to %d features', nfeat, ncol(X)))
index=createResample(y, ntimes)
train_model = function(m) {
if (m %in% c('xgbLinear', 'xgbTree', 'avNNet')) {
ap = F
} else { ap = T }
set.seed(myseed)
my_control <- trainControl(
method="boot632",
savePredictions="final",
index=index,
allowParallel = ap,
classProbs = T,
summaryFunction = twoClassSummary,
sampling = "smote"
)
mymod = train(X, y, trControl=my_control, method=m, tuneLength=tuneLength,
metric = 'ROC')
return(mymod)
}
trained_models = lapply(methods, train_model)
names(trained_models) = methods
resamps <- resamples(trained_models)
print(summary(resamps))
}
